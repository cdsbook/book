---
execute:
  freeze: auto
---

# More about R

```{r setup, include=FALSE}
source("prechapter.R")
suppressPackageStartupMessages(library(tidyverse))
```

## Welcome

This chapter/tutorial will start with a refresher on basic programming in R (from Module 1: variables, data types, functions), and then introduce some additional programming concepts such as control flow and loops.

{{< include ../../src/snippets/r_programming2_intro.Rmd >}}


## Values and variables

{{< include ../../src/snippets/r_programming2_variables_recap.Rmd >}}

{{< include ../../src/snippets/r_programming2_expressions_statements.Rmd >}}

{{< include ../../src/snippets/r_programming2_execution.Rmd >}}

## Data types

<!--
Numbers and strings (text recap)

Conversion between different types. 

Dates?

Vectors (numbers as vectors)

Lists

Dataframes and tibbles.
-->



In the first interactive tutorial, *An Introduction to Programming in R*, you learned about basic **data types** such as numbers, character strings, and Boolean values.

You also learned about more complex **data structures** such as vectors and lists which can hold multiple values of those basic data types.

*If you do not remember this, go back to the first interactive tutorial to refresh your memory.*

We also have data structures that can hold a 2-dimensional table of data (with rows and columns): the **dataframe**.

However, the dataframe has been in R since the language was first created, and as a result it has some odd behaviours that are counterintuitive and can lead to bugs.

The `tidyverse` collection of packages that we have been using add a new version of a dataframe that fix a lot of these problems called the **tibble**. We will use the names *dataframe* and *tibble* interchangeably in this course, and for the most part they are pretty similar, but you should be aware that they have some subtle differences and you should use tibbles when possible.



{{< include ../../src/snippets/r_programming2_vectors.Rmd >}}

{{< include ../../src/snippets/r_programming2_tibbles.Rmd >}}

## Functions

Coming soon.

## Scope and the environment

Coming soon.

<!--
Running functions from packages without loading the package...
-->

## Control Flow

Earlier in this tutorial we talked about how R executes one line of code and then moves onto the next.

But what about if you don't always want to go to the next line? Maybe want to jump to a different section of code or skip some lines entirely.

In the first interactive tutorial we mentioned **functions**, which are a way of saving particular lines of code so that they can be re-run. You learned how to **define** a function that had several input **parameters**, and then **call** it when you want to run it by *passing* values as **arguments** for each parameter. (Yes, there are a lot of words to learn for functions - you should review the first tutorial if this makes no sense!)



{{< include ../../src/snippets/r_programming2_if_else.Rmd >}}


## Loops

Sometimes you want to run a particular piece of code over and over again (after all, do simple things repeatedly is what computers are best at).

To do this we need to use a **loop**.

{{< include ../../src/snippets/r_programming2_for_loops.Rmd >}}



### Vectorization

When possible, we should try to work on entire vectors at once rather than looping over a vector with for loops.

This is because R will iterate through a loop one step at a time, whereas it can operate on multiple elements of a vector at the same time, so **vectorized** code is much faster.

We do not have to worry about this too much, as we are working on small datasets where small speed increases are not noticeable - however, much of the the `tidyverse` functions we have learned are already optimized to work on vectors.

There are also situations where we have to use loops rather than vectorized operations (i.e. if one calculation depends on the result of the previous). However, if you are working on large datasets in R in the future, and your code is running too slowly, see if there is a way to speed it up by applying an operation to entire vectors at a time (rather than looping through a vector).

<!--


Make a note about this? Optional/advanced

Timing?

Mapping functions?
-->

## Installing R packages

Coming soon.

<!--
- install.packages()
- installation location
- different versions of R
- dependencies and installation problems -> refer to solutions in the FAQ.
  - installing underlying software
  - installing a different version of the package (possibly from a different location/mirror)
  

-->
